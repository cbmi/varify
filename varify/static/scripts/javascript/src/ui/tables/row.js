// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['marionette', 'cilantro', '../../models', '../../templates'], function(Marionette, c, models, Templates) {
  var EmptyResultRow, ResultRow;
  ResultRow = (function(_super) {
    __extends(ResultRow, _super);

    function ResultRow() {
      this.onRender = __bind(this.onRender, this);
      this.onSync = __bind(this.onSync, this);
      this.onClick = __bind(this.onClick, this);
      return ResultRow.__super__.constructor.apply(this, arguments);
    }

    ResultRow.prototype.className = 'area-container variant-container';

    ResultRow.prototype.template = function() {};

    ResultRow.prototype.tagName = 'tr';

    ResultRow.prototype.events = {
      'click': 'onClick'
    };

    ResultRow.prototype.onClick = function(events) {
      return c.trigger('resultRow:click', this, this.model);
    };

    ResultRow.prototype.initialize = function() {
      this.data = {};
      if (!(this.data.resultPk = this.options.resultPk)) {
        throw new Error('result pk required');
      }
      this.model = new models.Result({
        id: this.data.resultPk
      });
      return this.model.on('sync', this.onSync);
    };

    ResultRow.prototype.onSync = function() {
      var $condensedFlags, $gene, $genomicPosition, $genotype, $hgvsC, $hgvsP, $phenotypeScore, $variantEffects, assessment, resultScore, variant;
      variant = this.model.get('variant');
      resultScore = this.model.get('score');
      assessment = this.model.get('assessment');
      $gene = $(Templates.geneLinks(variant.uniqueGenes, {
        collapse: true
      })).addClass('genes');
      $hgvsP = $(Templates.hgvsP(variant.effects[0])).addClass('hgvs-p');
      $variantEffects = $(Templates.variantEffects(variant.effects, true)).addClass('variant-effects').append($(Templates.pathogenicity(assessment)));
      $hgvsC = $(Templates.hgvsC(variant.effects[0])).addClass('hgvs-c').tooltip({
        container: 'body'
      });
      $genotype = $(Templates.genotype(this.model.get('genotype_value'), this.model.get('genotype_description'))).addClass('genotype').tooltip({
        container: 'body'
      });
      $genomicPosition = $(Templates.genomicPosition(variant.chr, variant.pos)).addClass('genomic-position').append($(Templates.category(assessment)));
      $phenotypeScore = $(Templates.phenotypeScore(resultScore)).addClass('phenotype-score');
      $condensedFlags = $(Templates.condensedFlags(variant));
      this.$el.empty();
      return this.$el.append($gene, $hgvsP, $variantEffects, $hgvsC, $genotype, $genomicPosition, $phenotypeScore, $condensedFlags);
    };

    ResultRow.prototype.onRender = function() {
      return this.model.fetch();
    };

    return ResultRow;

  })(Marionette.ItemView);
  EmptyResultRow = (function(_super) {
    __extends(EmptyResultRow, _super);

    function EmptyResultRow() {
      return EmptyResultRow.__super__.constructor.apply(this, arguments);
    }

    EmptyResultRow.prototype.align = 'left';

    EmptyResultRow.prototype.tagName = 'tr';

    return EmptyResultRow;

  })(c.ui.LoadView);
  return {
    ResultRow: ResultRow,
    EmptyResultRow: EmptyResultRow
  };
});
