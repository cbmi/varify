// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'marionette'], function(_, Marionette) {
  var Header;
  Header = (function(_super) {
    __extends(Header, _super);

    function Header() {
      this.onRender = __bind(this.onRender, this);
      this.onClick = __bind(this.onClick, this);
      return Header.__super__.constructor.apply(this, arguments);
    }

    Header.prototype.tagName = 'thead';

    Header.prototype.template = 'varify/tables/header';

    Header.prototype.events = {
      'click th': 'onClick'
    };

    Header.prototype.initialize = function() {
      this.data = {};
      if (!(this.data.view = this.options.view)) {
        throw new Error('view model required');
      }
    };

    Header.prototype._getConcept = function(element) {
      var concept;
      concept = parseInt(element.getAttribute('data-concept-id'));
      if ((concept != null) && !isNaN(concept)) {
        return concept;
      }
      return parseInt(element.parentElement.getAttribute('data-concept-id'));
    };

    Header.prototype.onClick = function(event) {
      var concept, model;
      concept = this._getConcept(event.target);
      if ((concept == null) || isNaN(concept)) {
        throw new Error('Unrecognized concept ID on column');
      }
      model = _.find(this.data.view.facets.models, function(f) {
        return f.get('concept') === concept;
      });
      if (model == null) {
        this.data.view.facets.add({
          concept: concept
        });
      }
      _.each(this.data.view.facets.models, function(f) {
        var direction;
        if (f.get('concept') === concept) {
          direction = f.get('sort');
          if (direction != null) {
            if (direction.toLowerCase() === "asc") {
              f.set('sort', "desc");
              return f.set('sort_index', 0);
            } else {
              f.unset('sort');
              return f.unset('sort_index');
            }
          } else {
            f.set('sort', "asc");
            return f.set('sort_index', 0);
          }
        } else {
          f.unset('sort');
          return f.unset('sort_index');
        }
      });
      return this.data.view.save();
    };

    Header.prototype.onRender = function() {
      return _.each(this.data.view.facets.models, function(f) {
        var $sortIcon, direction, sortClass;
        $sortIcon = $("th[data-concept-id=" + (f.get('concept')) + "] i");
        if ($sortIcon != null) {
          $sortIcon.removeClass('icon-sort icon-sort-up icon-sort-down');
          direction = (f.get('sort') || '').toLowerCase();
          sortClass = (function() {
            switch (direction) {
              case 'asc':
                return 'icon-sort-up';
              case 'desc':
                return 'icon-sort-down';
              default:
                return 'icon-sort';
            }
          })();
          return $sortIcon.addClass(sortClass);
        }
      });
    };

    return Header;

  })(Marionette.ItemView);
  return {
    Header: Header
  };
});
