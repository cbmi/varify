// Generated by CoffeeScript 1.7.1
define(['underscore', './utils', 'cilantro/utils/numbers'], function(_, utils, Numbers) {
  var assessmentMetrics, assessmentRows, category, cohortVariantDetailList, condensedFlags, dbSNPLink, geneLinks, genomicPosition, genotype, hgmdLinks, hgvsC, hgvsP, pathogenicity, phenotypeScore, variantEffects, _renderGene, _renderTranscript, _renderVariantEffect;
  genomicPosition = function(chr, pos) {
    var pchr;
    pchr = Numbers.toDelimitedNumber(pos);
    return "<td class=genomic-position><a target=_blank href=\"http://genome.ucsc.edu/cgi-bin/hgTracks?position=chr" + chr + "%3A" + pos + "\">chr" + chr + " <span class=muted>@</span> " + pchr + "</a></td>";
  };
  phenotypeScore = function(resultScore) {
    var rank, score;
    if (resultScore != null) {
      rank = parseInt(resultScore.rank);
      score = parseFloat(resultScore.score);
      if (!isNaN(rank) && !isNaN(score)) {
        return "<td>" + rank + " <small class=muted>(" + score + ")</small></td>";
      }
    }
    return "<td></td>";
  };
  _renderGene = function(gene) {
    var name;
    name = gene.name || '';
    if (gene.hgnc_id) {
      return "<a title=\"" + name + "\" target=_blank href=\"http://www.genenames.org/data/hgnc_data.php?hgnc_id=" + gene.hgnc_id + "\">" + gene.symbol + "</a>";
    }
    return "<span title=\"" + name + "\">" + gene.symbol + "</span>";
  };
  category = function(assessment) {
    var html;
    if ((assessment != null) && (assessment.assessment_category != null)) {
      html = [];
      html.push('<br />Category:');
      html.push(assessment.assessment_category.name);
      if (assessment.assessment_category.id > 2) {
        html.push('<span class="muted">(Incidental Finding)</span>');
      }
      return "<span class='assessment-category'>" + (html.join(' ')) + "</span>";
    } else {
      return '';
    }
  };
  pathogenicity = function(assessment) {
    var html;
    if ((assessment != null) && (assessment.pathogenicity != null)) {
      html = [];
      html.push('<br />Pathogenicity: ');
      html.push(assessment.pathogenicity.name);
      return "<span class='pathogenicity'>" + (html.join('')) + "</span>";
    } else {
      return '';
    }
  };
  geneLinks = function(genes, collapse) {
    var gene, html, len;
    if (collapse == null) {
      collapse = false;
    }
    html = [];
    len = genes.length;
    if (!len) {
      html.push('<span class=muted>Unknown</span>');
    } else if (collapse || len === 1) {
      html.push(_renderGene(genes[0]));
    } else {
      html.push(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = genes.length; _i < _len; _i++) {
          gene = genes[_i];
          _results.push(_renderGene(gene));
        }
        return _results;
      })()).join(', '));
    }
    return "<td>" + (html.join(' ')) + "</td>";
  };
  hgvsC = function(eff) {
    var text;
    if (eff != null) {
      text = eff.hgvs_c || '';
      return "<td title='" + text + "'>" + text + "</td>";
    } else {
      return "<td></td>";
    }
  };
  genotype = function(value, description) {
    var title;
    title = "" + value + " (" + description + ")";
    return "<td title='" + title + "'>" + value + " <small>(" + description + ")</small></td>";
  };
  hgvsP = function(eff) {
    if (eff != null) {
      return "<td>" + (eff.hgvs_p || eff.amino_acid_change || '') + "</td>";
    } else {
      return "<td></td>";
    }
  };
  _renderVariantEffect = function(eff) {
    var html;
    html = [];
    html.push("" + eff.type);
    if (eff.transcript != null) {
      html.push('<small>');
      html.push(eff.transcript.transcript);
      if (eff.segment != null) {
        html.push(" @ " + eff.segment);
      }
      html.push('</small>');
    }
    html.push('</small>');
    return html.join(' ');
  };
  variantEffects = function(effects, collapse) {
    var eff, html, labelClass, len;
    if (collapse == null) {
      collapse = false;
    }
    html = [];
    len = effects.length;
    if (!len) {
      return '<span class=muted>No Effects</span>';
    } else if (collapse || len === 1) {
      labelClass = utils.priorityClass(utils.effectImpactPriority(effects[0].impact));
      html.push("<span class=\"" + labelClass + "\">" + (_renderVariantEffect(effects[0])) + "</span>");
    } else {
      html.push(((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = effects.length; _i < _len; _i++) {
          eff = effects[_i];
          _results.push(_renderVariantEffect(eff));
        }
        return _results;
      })()).join(', '));
    }
    return "<td>" + (html.join(' ')) + "</td>";
  };
  _renderTranscript = function(effect) {
    var gene;
    if (effect.transcript == null) {
      return '';
    }
    content.push("<a href=\"http://www.ncbi.nlm.nih.gov/nuccore/" + transcript.transcript + "\">" + transcript.transcript + "</a></small> ");
    if (attrs.uniqueGenes.length > 1 && (gene = transcript.gene) && gene) {
      return content.push("<small>for <a target=_blank href=\"http://www.genenames.org/data/hgnc_data.php?hgnc_id=" + gene.hgnc_id + "\">" + gene.symbol + "</a></small> ");
    }
  };
  condensedFlags = function(attrs) {
    var flags, html, klass, label, present, _i, _len, _ref;
    flags = [];
    flags.push(['dbSNP', attrs['rsid'] != null]);
    flags.push(['HGMD', _.pluck(attrs['phenotypes'], 'hgmd_id').length > 0]);
    flags.push(['1000g', attrs['1000g'].length > 0]);
    flags.push(['EVS', attrs['evs'].length > 0]);
    html = [];
    for (_i = 0, _len = flags.length; _i < _len; _i++) {
      _ref = flags[_i], label = _ref[0], present = _ref[1];
      klass = present ? 'text-info' : 'muted';
      html.push("<span class=\"flag " + klass + "\">" + label + "</span>");
    }
    return "<td class=flags-container><span class=flags>" + (html.join('')) + "<span></td>";
  };
  cohortVariantDetailList = function(cohorts) {
    var cohort, cohortHtml, html, popoverHtml, sample, sampleHtml, sampleNames, samplePath, _i, _j, _len, _len1, _ref;
    html = [];
    for (_i = 0, _len = cohorts.length; _i < _len; _i++) {
      cohort = cohorts[_i];
      cohortHtml = "<small>" + cohort.name + "</small> " + (Numbers.prettyNumber(cohort.af * 100)) + "% <span class=muted>(" + cohort.size + ")</span>";
      sampleNames = [];
      _ref = _.sortBy(cohort.samples, function(s) {
        return s.name;
      });
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        sample = _ref[_j];
        samplePath = "/workspace/samples/" + sample.id;
        sampleNames.push("<a href='" + (utils.toAbsolutePath(samplePath)) + "/'>" + sample.name + "</a>");
      }
      sampleHtml = sampleNames.join('<br />');
      popoverHtml = "<div>" + ($('<div />').html(sampleHtml).html()) + "</div>";
      html.push("<li class=cohort-details><a href='#' class=cohort-sample-popover title='Samples in Cohort' data-html='true' data-placement=right data-trigger=click data-content='" + popoverHtml + "'>" + cohortHtml + "</a></li>");
    }
    return "<ul class=unstyled>" + (html.join('')) + "</ul>";
  };
  dbSNPLink = function(rsid) {
    return "<a target=_blank href=\"http://www.ncbi.nlm.nih.gov/projects/SNP/snp_ref.cgi?rs=" + rsid + "\">" + rsid + "</a>";
  };
  assessmentMetrics = function(items, usernamePopover) {
    var html;
    if (usernamePopover == null) {
      usernamePopover = false;
    }
    html = [];
    _.each(items, function(item, key) {
      var call_indicator, countHtml, name, popoverHtml, prefixHtml, username, usernames, _i, _len, _ref;
      call_indicator = item.is_user_call ? "*" : "";
      name = (key != null) && key !== "" ? key : "N/A";
      prefixHtml = "<small>" + name + "</small>  " + (Numbers.prettyNumber(item.percentage)) + "% ";
      countHtml = "<span class=muted>(" + item.count + ")" + call_indicator + "</span>";
      if (item.usernames.length > 0 && usernamePopover) {
        usernames = [];
        _ref = item.usernames;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          username = _ref[_i];
          usernames.push(username);
        }
        popoverHtml = usernames.join('<br />');
        countHtml = "<a href='#' class=username-popover data-trigger=hover title='Users who made this call:' data-html=true data-placement=top data-content='" + popoverHtml + "'>" + countHtml + "</a>";
      }
      return html.push("<li>" + prefixHtml + countHtml + "</li>");
    });
    return "<ul class=unstyled>" + (html.join('')) + "</ul>";
  };
  assessmentRows = function(assessments) {
    var groupedAssessments, html;
    html = [];
    groupedAssessments = _.chain(assessments).groupBy('pathogenicity').value();
    _.each(groupedAssessments, function(assessmentList, pathogenicity) {
      var assessment, assessmentHasDetails, samplePath, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = assessmentList.length; _i < _len; _i++) {
        assessment = assessmentList[_i];
        assessmentHasDetails = assessment.details != null;
        html.push("<tr id=assessment-row-" + assessment.id + ">");
        if (assessmentHasDetails) {
          html.push("<td><a href=#><i class=icon-plus></i><i class='icon-minus hide'></i></a></td>");
        } else {
          html.push("<td></td>");
        }
        samplePath = "/workspace/samples/" + assessment.sample.id;
        html.push("<td><a href='" + (utils.toAbsolutePath(samplePath)) + "/'>" + assessment.sample.name + "</a></td>");
        if (!_.isEmpty(assessment.user.email)) {
          html.push("<td><a href='mailto:" + assessment.user.email + "'>" + assessment.user.username + "</a></td>");
        } else {
          html.push("<td>" + assessment.user.username + "</td>");
        }
        html.push("<td>" + assessment.pathogenicity + "</td>");
        html.push("<td>" + assessment.category + "</td>");
        html.push("<td>" + assessment.mother_result + "</td>");
        html.push("<td>" + assessment.father_result + "</td>");
        html.push("<td>" + assessment.sanger + "</td>");
        html.push('</tr>');
        if (assessmentHasDetails) {
          _results.push(html.push("<tr class='hide no-border' id=assessment-row-" + assessment.id + "-details><td></td><td colspan='7'><strong>Evidence Details: </strong>" + assessment.details + "</td></tr>"));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    return html.join('');
  };
  hgmdLinks = function(phenotypes) {
    var p;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = phenotypes.length; _i < _len; _i++) {
        p = phenotypes[_i];
        if (p.hgmd_id != null) {
          _results.push(p.hgmd_id);
        }
      }
      return _results;
    })()).join(', ');
  };
  return {
    assessmentMetrics: assessmentMetrics,
    assessmentRows: assessmentRows,
    category: category,
    cohortVariantDetailList: cohortVariantDetailList,
    condensedFlags: condensedFlags,
    dbSNPLink: dbSNPLink,
    hgmdLinks: hgmdLinks,
    hgvsC: hgvsC,
    hgvsP: hgvsP,
    geneLinks: geneLinks,
    genomicPosition: genomicPosition,
    genotype: genotype,
    pathogenicity: pathogenicity,
    phenotypeScore: phenotypeScore,
    variantEffects: variantEffects
  };
});
